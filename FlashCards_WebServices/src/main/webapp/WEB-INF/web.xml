<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         id="WebApp_ID" metadata-complete="true"
         version="3.0">
    <display-name>FlashCards_WebServices</display-name>
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath*:META-INF/applicationContext-repository.xml
            classpath*:META-INF/applicationContext-service.xml
            classpath*:META-INF/applicationContext-webServices.xml
            classpath*:META-INF/applicationContext-springSecurity.xml
        </param-value>
    </context-param>

    <context-param>
        <param-name>contextInitializerClasses</param-name>
        <param-value>org.robbins.flashcards.context.FlashCardsApplicationContextInitializer</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- ================================================================== 
        To use request scope beans without Spring MVC, you should declare RequestContextListener 
        in web.xml http://stackoverflow.com/questions/2039522/getting-a-no-thread-bound-request-found-error-from-spring-in-my-web-app 
        ================================================================== -->
    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>

    <!-- Spring Security -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- DispatcherServlet required for Spring security oauth -->
    <servlet>
        <servlet-name>spring</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>spring</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- JAX-RS implementation -->
    <servlet>
        <servlet-name>jersey-serlvet</servlet-name>
        <servlet-class>com.sun.jersey.spi.spring.container.servlet.SpringServlet</servlet-class>
        <init-param>
            <param-name>com.sun.jersey.config.property.packages</param-name>
            <param-value>
                 org.robbins.flashcards.webservices;com.wordnik.swagger.jersey.listing
             </param-value>
        </init-param>

        <init-param>
            <param-name>com.sun.jersey.config.feature.XmlRootElementProcessing</param-name>
            <param-value>true</param-value>
        </init-param>

        <init-param>
            <param-name>com.sun.jersey.spi.container.ContainerRequestFilters</param-name>
            <param-value>
                org.robbins.flashcards.jersey.filters.SecurityFilter;
                org.robbins.flashcards.jersey.filters.AcceptFilter;
                <!--com.sun.jersey.api.container.filter.LoggingFilter;-->
            </param-value>
        </init-param>
        <!--<init-param>-->
            <!--<param-name>com.sun.jersey.spi.container.ContainerResponseFilters</param-name>-->
            <!--<param-value>-->
                <!--com.sun.jersey.api.container.filter.LoggingFilter;-->
            <!--</param-value>-->
        <!--</init-param>-->
        <!--<init-param>-->
            <!--<param-name>com.sun.jersey.config.feature.Trace</param-name>-->
            <!--<param-value>false</param-value>-->
        <!--</init-param>-->

        <load-on-startup>2</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>jersey-serlvet</servlet-name>
        <url-pattern>/v1/*</url-pattern>
    </servlet-mapping>

    <!-- Swagger API doc implementation -->
    <servlet>
        <servlet-name>JerseyJaxrsConfig</servlet-name>
        <servlet-class>com.wordnik.swagger.jersey.config.JerseyJaxrsConfig</servlet-class>
        <init-param>
            <param-name>api.version</param-name>
            <param-value>1.0.0</param-value>
        </init-param>
        <init-param>
            <param-name>swagger.api.basepath</param-name>
            <param-value>http://localhost:8080/api</param-value>
        </init-param>
        <load-on-startup>3</load-on-startup>
    </servlet>
</web-app>