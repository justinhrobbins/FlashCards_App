[
  {
    "_class": "org.robbins.flashcards.dto.FlashCardDto",
    "question": "Which Maven plugin executes tests?",
    "answer": "<ul>\n<li>maven-<strong>surefire</strong>-plugin is designed for running <b>unit tests</b> and if any of the tests fail then it will fail the build immediately.<br><br></li>\n<li>maven-<strong>failsafe</strong>-plugin is designed for running <b>integration tests</b>, and decouples failing the build if there are test failures from actually running the tests.</li>\n</ul>"
  },
  {
    "_class": "org.robbins.flashcards.dto.FlashCardDto",
    "question": "What are the build phases of the default Maven lifecycle?",
    "answer": "<ul>\n</ul><ol><li><strong>validate</strong> - validate the project is correct and all necessary information is available</li><li><strong>compile</strong> - compile the source code of the project</li><li><strong>test</strong> - test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed</li><li><strong>package</strong> - take the compiled code and package it in its distributable format, such as a JAR.</li><li><strong>integration-test</strong> - process and deploy the package if necessary into an environment where integration tests can be run</li><li><strong>verify</strong> - run any checks to verify the package is valid and meets quality criteria</li><li><strong>install</strong> - install the package into the local repository, for use as a dependency in other projects locally</li><li><strong>deploy</strong> - done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.</li></ol><ul>\n</ul>",
    "tags": [
      {
        "name": "Maven"
      }
    ],
    "links": [
      "http://maven.apache.org/surefire/maven-surefire-plugin/",
      "http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html"
    ]
  },
  {
    "_class": "org.robbins.flashcards.dto.FlashCardDto",
    "question": "What are some new language features introduced in Java 5,6 and 7?",
    "answer": "<ul><li>Java 5</li><ul><li>Generics</li><li>Annotations</li><li>Varargs<br></li></ul><li>Java 6</li><li>Java 7</li></ul>",
    "tags": [
      {
        "name": "Java"
      }
    ]
  },
  {
    "_class": "org.robbins.flashcards.dto.FlashCardDto",
    "question": "What is the standard Maven directory layout?",
    "answer": "src/main/java<br>src/main/resources<br>src/main/webapp<br>src/test/java<br>src/test/resources<br>target<br>",
    "tags": [
      {
        "name": "Maven"
      }
    ]
  },
  {
    "_class": "org.robbins.flashcards.dto.FlashCardDto",
    "question": "How can you protect against SQL Injection?",
    "answer": "<ul><li>Parameterized statements can be used that work with parameters (sometimes called placeholders or bind variables).&nbsp; A placeholder can only store a value of the given type and not an arbitrary SQL fragment. Hence the SQL injection would simply be treated as a strange (and probably invalid) parameter value.<br></li></ul><ul><li>JPA/ORM libraries - SQL and QL injection can be effectively prevented with the use of JPA Named Queries.</li></ul>",
    "tags": [
      {
        "name": "Java"
      },
      {
        "name": "SQL"
      }
    ]
  },
  {
    "_class": "org.robbins.flashcards.dto.FlashCardDto",
    "question": "What are the Maven dependency scopes?",
    "answer": "There are 6 available scopes:<br><ol><li><b>compile </b>- This is the default scope, used if none is specified. Compile dependencies are available in all classpaths of a project. Furthermore, those dependencies are propagated to dependent projects.</li><li><b>provided </b>- This is much like compile, but indicates you expect the JDK or a container to provide the dependency at runtime. <br></li><li><b>runtime </b>- This scope indicates that the dependency is not required for compilation, but is for execution. It is in the runtime and test classpaths, but not the compile classpath.</li><li><b>test </b>- This scope indicates that the dependency is not required for normal use of the application, and is only available for the test compilation and execution phases.</li><li><b>system </b>- This scope is similar to provided except that you have to provide the JAR which contains it explicitly. The artifact is always available and is not looked up in a repository.</li><li><b>import</b><br></li></ol>",
    "tags": [
      {
        "name": "Maven"
      }
    ]
  },
  {
    "_class": "org.robbins.flashcards.dto.FlashCardDto",
    "question": "What is the difference between Maven lifecycles, phases and goals?",
    "answer": "<ul>\r\n<li><strong>Lifecycle </strong>- A lifecycle is comprised of a list of phases which are executed sequentially.</li>\r\n<li><strong>Phase </strong>- A build phase represents a stage in the lifecycle.&nbsp; A build phase can also have zero or more goals bound to it.</li>\r\n<li><strong>Goal </strong>- A goal represents a specific task (finer than a build phase) which contributes to the building and managing of a project.</li>\r\n</ul>",
    "tags": [
      {
        "name": "Maven"
      }
    ]
  },
  {
    "_class": "org.robbins.flashcards.dto.FlashCardDto",
    "question": "What are the meanings and items of the Agile Manifesto?",
    "answer": "<ol><li><b>Individuals and interactions</b> – in agile development, self-organization and motivation are important, as are interactions like co-location and pair programming.</li><li><b>Working software</b> – working software will be more useful and welcome than just presenting documents to clients in meetings.</li><li><b>Customer collaboration</b> – requirements cannot be fully collected at the beginning of the software development cycle, therefore continuous customer or stakeholder involvement is very important.</li><li><b>Responding to change</b> – agile development is focused on quick responses to change and continuous development.</li></ol>",
    "tags": [
      {
        "name": "Agile"
      },
      {
        "name": "Git"
      }
    ]
  },
  {
    "_class": "org.robbins.flashcards.dto.FlashCardDto",
    "question": "What is the difference between Fetch and Pull in Git?",
    "answer": "<ul><li><b>Pull</b> will merge any pulled commits into the branch you are currently working in</li><li><b>Fetch </b>retrieves any commits from the target remote that you do not have and stores them in your local repository but it does not <b>merge</b> them with your current branch.<br></li></ul>",
    "tags": [
      {
        "name": "Git"
      }
    ]
  },
  {
    "_class": "org.robbins.flashcards.dto.FlashCardDto",
    "question": "What is the difference between the terms ''origin'' and ''master'' in Git?",
    "answer": "<b>Origin </b>refers to the the original remote repository, by convention it is the primary centralized repository as well.<br><br><b>Master</b> refers to the branch.&nbsp; There is nothing special about the name - you don''t actually have to have a ''master'' branch but since it''s the default that is created, most projects do. <br><br>Usually most projects work with an origin remote, and the master branch by default<br>",
    "tags": [
      {
        "name": "JPA"
      }
    ]
  },
  {
    "_class": "org.robbins.flashcards.dto.FlashCardDto",
    "question": "What are three ways to wire Spring beans?",
    "answer": "<ol><li>XML Configuration</li><li>Annotations</li><li>Java-based configuration<br></li></ol>",
    "tags": [
      {
        "name": "Spring"
      }
    ]
  },
  {
    "_class": "org.robbins.flashcards.dto.FlashCardDto",
    "question": "What are some implementations for JAX-RS?",
    "answer": "Jersey<br>Apache CXF<br><br>Note: Although Spring MVC can be used to build RESTful web services, it does not implement the JAX-RS spec<br>",
    "tags": [
      {
        "name": "JAX-RS"
      }
    ]
  },
  {
    "_class": "org.robbins.flashcards.dto.FlashCardDto",
    "question": "What are the available ''scopes'' for Spring beans?",
    "answer": "<ol><li>singleton - Single instance per Spring container<br></li><li>prototype - bean can be instantiated per use<br></li><li>request (requires web-capable context)</li><li>session (requires web-capable context)<br></li></ol>",
    "tags": [
      {
        "name": "Spring"
      }
    ]
  },
  {
    "_class": "org.robbins.flashcards.dto.FlashCardDto",
    "question": "What are the purpose of Maven build profiles?",
    "answer": "Profiles modify the POM at build time, and are meant to be used in complementary sets to give equivalent-but-different parameters for a set of target environments (providing, for example, the path of the appserver root in the development, testing, and production environments). As such, profiles can easily lead to differing build results from different members of your team.<br>",
    "tags": [
      {
        "name": "Maven"
      }
    ]
  }
]
